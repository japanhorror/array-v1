### Вопросы к экзамену по дисциплине «Основы алгоритмизации и программирования» (C++)

---

#### 1. Типы данных в языке программирования  
**Описание:** Типы данных определяют, какие значения может принимать переменная и какие операции можно с ней выполнять.  
**Пример:**  
```cpp
int age = 25;          // Целочисленный тип
float price = 99.99;   // Вещественный тип
char symbol = 'A';     // Символьный тип
bool isTrue = true;    // Логический тип
```

---

#### 2. Структура программы  
**Описание:** Программа на C++ состоит из директив препроцессора, объявлений функций, главной функции `main()` и блоков кода.  
**Пример:**  
```cpp
#include <iostream>    // Директива препроцессора
using namespace std;   // Использование пространства имен

int main() {           // Главная функция
    cout << "Hello, World!" << endl;
    return 0;
}
```

---

#### 3. Оператор чтения (ввода)  
**Описание:** Используется для ввода данных с клавиатуры. В C++ для этого применяется `cin`.  
**Пример:**  
```cpp
int number;
cout << "Введите число: ";
cin >> number;
```

---

#### 4. Оператор записи (вывода)  
**Описание:** Используется для вывода данных на экран. В C++ для этого применяется `cout`.  
**Пример:**  
```cpp
cout << "Результат: " << 42 << endl;
```

---

#### 5. Математические стандартные функции ЯП  
**Описание:** В C++ доступны математические функции через библиотеку `<cmath>`, например, `sqrt()`, `sin()`, `pow()`.  
**Пример:**  
```cpp
#include <cmath>
double result = sqrt(16); // Результат: 4
```

---

#### 6. Ветвления в программах  
**Описание:** Позволяют выполнять разные блоки кода в зависимости от условия. Используются операторы `if`, `else if`, `else`.  
**Пример:**  
```cpp
int x = 10;
if (x > 0) {
    cout << "Положительное число" << endl;
} else {
    cout << "Отрицательное число" << endl;
}
```

---

#### 7. Использование составного оператора  
**Описание:** Составной оператор — это блок кода, заключенный в фигурные скобки `{}`.  
**Пример:**  
```cpp
{
    int a = 5;
    int b = 10;
    cout << a + b << endl;
}
```

---

#### 8. Оператор выбора  
**Описание:** Оператор `switch` позволяет выбрать один из множества вариантов выполнения кода.  
**Пример:**  
```cpp
int day = 3;
switch (day) {
    case 1: cout << "Понедельник" << endl; break;
    case 2: cout << "Вторник" << endl; break;
    default: cout << "Другой день" << endl;
}
```

---

#### 9. Цикл с предусловием  
**Описание:** Цикл `while` выполняется, пока условие истинно. Проверка условия происходит перед каждой итерацией.  
**Пример:**  
```cpp
int i = 0;
while (i < 5) {
    cout << i << endl;
    i++;
}
```

---

#### 10. Цикл с постусловием  
**Описание:** Цикл `do-while` выполняется хотя бы один раз, а затем проверяет условие.  
**Пример:**  
```cpp
int i = 0;
do {
    cout << i << endl;
    i++;
} while (i < 5);
```

---

#### 11. Цикл с параметром  
**Описание:** Цикл `for` позволяет компактно задать начальное значение, условие и шаг изменения переменной.  
**Пример:**  
```cpp
for (int i = 0; i < 5; i++) {
    cout << i << endl;
}
```

---

#### 12. Подпрограммы—функции  
**Описание:** Функции позволяют разбить программу на логические части. Они могут возвращать значение.  
**Пример:**  
```cpp
int add(int a, int b) {
    return a + b;
}
int result = add(3, 4); // Результат: 7
```

---

#### 13. Подпрограммы-процедуры  
**Описание:** В C++ процедуры — это функции, которые не возвращают значение (`void`).  
**Пример:**  
```cpp
void greet(string name) {
    cout << "Привет, " << name << "!" << endl;
}
greet("Анна");
```

---

#### 14. Программирование рекуррентных последовательностей — арифметической прогрессии  
**Описание:** Арифметическая прогрессия — последовательность чисел с постоянной разностью.  
**Пример:**  
```cpp
int a1 = 4, d = 3, n = 20;
int an = a1 + (n - 1) * d; // 20-й элемент: 61
```

---

#### 15. Программирование рекуррентных последовательностей — геометрической прогрессии  
**Описание:** Геометрическая прогрессия — последовательность чисел с постоянным множителем.  
**Пример:**  
```cpp
int b1 = 3, q = 2, n = 10;
int bn = b1 * pow(q, n - 1); // 10-й элемент: 1536
```

---

#### 16. Программирование рекуррентных последовательностей — вывод чисел Фибоначчи  
**Описание:** Каждое следующее число равно сумме двух предыдущих.  
**Пример:**  
```cpp
int fib(int n) {
    if (n <= 1) return n;
    return fib(n - 1) + fib(n - 2);
}
cout << fib(10); // Результат: 55
```

---

#### 17. Программирование рекуррентных последовательностей — нахождение факториала целого числа  
**Описание:** Факториал числа `n` — произведение всех целых чисел от 1 до `n`.  
**Пример:**  
```cpp
int factorial(int n) {
    return (n == 0) ? 1 : n * factorial(n - 1);
}
cout << factorial(5); // Результат: 120
```

---

#### 18. Строковый тип данных  
**Описание:** Строки представляют последовательность символов. В C++ используются `string` из библиотеки `<string>`.  
**Пример:**  
```cpp
#include <string>
string name = "Иван";
cout << name.length(); // Длина строки: 4
```

---

#### 19. Функции со строками  
**Описание:** Строки поддерживают множество функций, таких как `length()`, `substr()`, `find()`.  
**Пример:**  
```cpp
string text = "Hello, World!";
cout << text.substr(0, 5); // Результат: "Hello"
```

---

#### 20. Процедуры со строками  
**Описание:** Процедуры для работы со строками, например, `append()`, `erase()`.  
**Пример:**  
```cpp
string str = "Hello";
str.append(" World!");
cout << str; // Результат: "Hello World!"
```

---

#### 21. Стандартные функции ord(x) и chr(x)  
**Описание:** В C++ аналог `ord(x)` — `int(x)`, а `chr(x)` — `char(x)`.  
**Пример:**  
```cpp
char symbol = 'A';
cout << int(symbol); // Код ASCII: 65
cout << char(65);    // Символ: 'A'
```

---

#### 22. Одномерные массивы  
**Описание:** Массив — это набор элементов одного типа, доступ к которым осуществляется по индексу.  
**Пример:**  
```cpp
int arr[5] = {1, 2, 3, 4, 5};
cout << arr[0]; // Первый элемент: 1
```

---

#### 23. Сортировка массивов «методом пузырька»  
**Описание:** Алгоритм сортировки, который последовательно сравнивает соседние элементы.  
**Пример:**  
```cpp
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1])
                swap(arr[j], arr[j+1]);
}
```

---

#### 24. Двумерные массивы  
**Описание:** Матрица — это массив массивов. Доступ к элементам осуществляется через два индекса.  
**Пример:**  
```cpp
int matrix[2][2] = {{1, 2}, {3, 4}};
cout << matrix[1][0]; // Элемент: 3
```

---

#### 25. Множественный тип данных  
**Описание:** В C++ для работы с множествами используется библиотека `<set>`.  
**Пример:**  
```cpp
#include <set>
set<int> numbers = {1, 2, 3, 4};
numbers.insert(5); // Добавление элемента
```

---

#### 26. Операции над множествами  
**Описание:** Основные операции: объединение, пересечение, разность.  
**Пример:**  
```cpp
set<int> a = {1, 2, 3}, b = {3, 4, 5};
// Объединение
for (int x : a) cout << x << " ";
for (int x : b) cout << x << " ";
```

---

#### 27. Файлы и файловые переменные  
**Описание:** Для работы с файлами используется библиотека `<fstream>`.  
**Пример:**  
```cpp
#include <fstream>
ofstream file("example.txt");
file << "Hello, File!";
file.close();
```

---

#### 28. Правило создания и заполнения файлов  
**Описание:** Файл создается с помощью `ofstream`, данные записываются оператором `<<`.  
**Пример:**  
```cpp
ofstream outFile("data.txt");
outFile << "Пример записи в файл";
outFile.close();
```

---

#### 29. Правило чтения из файлов  
**Описание:** Для чтения используется `ifstream`, данные считываются оператором `>>` или `getline()`.  
**Пример:**  
```cpp
ifstream inFile("data.txt");
string line;
getline(inFile, line);
cout << line;
inFile.close();
```

---

#### 30. Текстовые файлы  
**Описание:** Текстовые файлы содержат строки данных. Работа с ними аналогична работе с консольным вводом/выводом.  
**Пример:**  
```cpp
ofstream textFile("text.txt");
textFile << "Пример текста";
textFile.close();
```

---

#### 31. Комбинированный тип данных  
**Описание:** Структуры (`struct`) позволяют объединять данные разных типов.  
**Пример:**  
```cpp
struct Student {
    string name;
    int age;
};
Student s = {"Анна", 20};
```

---

#### 32. Работа с файлами записей  
**Описание:** Записи (структуры) можно сохранять в файлы и читать из них.  
**Пример:**  
```cpp
struct Record { int id; string data; };
Record r = {1, "Запись"};
ofstream file("records.bin", ios::binary);
file.write((char*)&r, sizeof(r));
file.close();
```

---

#### 33. Указатели и динамические структуры  
**Описание:** Указатели хранят адреса переменных. Динамическая память выделяется оператором `new`.  
**Пример:**  
```cpp
int* ptr = new int(10);
cout << *ptr; // Значение: 10
delete ptr;
```

---

#### 34. Связь между динамическими величинами и их указателями  
**Описание:** Указатели позволяют управлять динамически выделенной памятью.  
**Пример:**  
```cpp
int* arr = new int[5]{1, 2, 3, 4, 5};
cout << arr[0]; // Элемент: 1
delete[] arr;
```

---

#### 35. Связанные списки  
**Описание:** Список состоит из узлов, каждый из которых содержит данные и указатель на следующий узел.  
**Пример:**  
```cpp
struct Node {
    int data;
    Node* next;
};
Node* head = new Node{1, nullptr};
```

---

#### 36. Понятие кольцевого списка  
**Описание:** В кольцевом списке последний узел указывает на первый.  
**Пример:**  
```cpp
Node* head = new Node{1, nullptr};
head->next = head; // Кольцевой список
```

---

#### 37. Понятие очереди  
**Описание:** Очередь — это структура данных, работающая по принципу FIFO (первым пришел — первым ушел).  
**Пример:**  
```cpp
#include <queue>
queue<int> q;
q.push(1);
q.push(2);
cout << q.front(); // Первый элемент: 1
```

---

#### 38. Понятие дерева  
**Описание:** Дерево — это иерархическая структура данных с узлами и связями между ними.  
**Пример:**  
```cpp
struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;
};
TreeNode* root = new TreeNode{1, nullptr, nullptr};
```

---

#### 39. Внешние подпрограммы  
**Описание:** Внешние подпрограммы — это функции, объявленные в других файлах или библиотеках.  
**Пример:**  
```cpp
// Внешний файл: lib.cpp
extern "C" void externalFunc() {
    cout << "Внешняя функция" << endl;
}
```

---

#### 40. Модули  
**Описание:** В C++ модули (в стандарте C++20) позволяют организовывать код в независимые единицы.  
**Пример:**  
```cpp
// Модуль math.cpp
export module math;
export int add(int a, int b) { return a + b; }
```

---

#### 41. Основные понятия объектно-ориентированного программирования  
**Описание:** ООП включает классы, объекты, инкапсуляцию, наследование и полиморфизм.  
**Пример:**  
```cpp
class Animal {
public:
    void speak() { cout << "Звук животного" << endl; }
};
```

---

#### 42. Понятие полиморфизма  
**Описание:** Полиморфизм позволяет использовать один интерфейс для разных типов данных.  
**Пример:**  
```cpp
class Animal {
public:
    virtual void speak() { cout << "Звук животного" << endl; }
};
class Dog : public Animal {
public:
    void speak() override { cout << "Гав!" << endl; }
};
```

---

#### 43. Понятие наследования  
**Описание:** Наследование позволяет создавать новые классы на основе существующих.  
**Пример:**  
```cpp
class Vehicle {
public:
    void start() { cout << "Транспорт запущен" << endl; }
};
class Car : public Vehicle {};
Car car;
car.start();
```

---

#### 44. Понятие инкапсуляции  
**Описание:** Инкапсуляция — это сокрытие деталей реализации и предоставление интерфейса.  
**Пример:**  
```cpp
class BankAccount {
private:
    double balance;
public:
    void deposit(double amount) { balance += amount; }
};
```